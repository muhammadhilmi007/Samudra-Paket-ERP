"use client";

import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { PlusIcon, PencilIcon, TrashIcon } from '@heroicons/react/24/outline';
import Table from '../../organisms/Table';
import { Form, FormField } from '../../organisms/Form';
import Button from '../../atoms/Button';
import Avatar from '../../atoms/Avatar';
import { z } from 'zod';

/**
 * UserManagement Component
 * Manage users and their roles/permissions
 */
const UserManagement = ({
  users = [],
  roles = [],
  onUserUpdate,
  onUserCreate,
  onUserDelete,
  loading = false,
}) => {
  // State for modal
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalMode, setModalMode] = useState('create'); // 'create' or 'edit'
  const [selectedUser, setSelectedUser] = useState(null);

  // Validation schema
  const userSchema = z.object({
    firstName: z.string().min(1, 'First name is required'),
    lastName: z.string().min(1, 'Last name is required'),
    email: z.string().email('Invalid email address'),
    phone: z.string().optional(),
    roleId: z.string().min(1, 'Role is required'),
    isActive: z.boolean().optional(),
    password: modalMode === 'create' 
      ? z.string().min(8, 'Password must be at least 8 characters') 
      : z.string().optional(),
  });

  // Table columns
  const columns = [
    {
      accessor: 'name',
      header: 'User',
      render: (_, user) => (
        <div className="flex items-center">
          <Avatar 
            src={user.profileImage} 
            alt={`${user.firstName} ${user.lastName}`} 
            size="sm" 
            className="mr-3"
          />
          <div>
            <div className="font-medium text-gray-900">
              {user.firstName} {user.lastName}
            </div>
            <div className="text-sm text-gray-500">{user.email}</div>
          </div>
        </div>
      ),
    },
    {
      accessor: 'role',
      header: 'Role',
      render: (_, user) => {
        const role = roles.find(r => r.id === user.roleId);
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
            {role?.name || 'Unknown'}
          </span>
        );
      },
    },
    {
      accessor: 'status',
      header: 'Status',
      render: (_, user) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
          user.isActive 
            ? 'bg-green-100 text-green-800' 
            : 'bg-gray-100 text-gray-800'
        }`}>
          {user.isActive ? 'Active' : 'Inactive'}
        </span>
      ),
    },
    {
      accessor: 'lastLogin',
      header: 'Last Login',
      render: (_, user) => (
        <span className="text-sm text-gray-500">
          {user.lastLogin ? new Date(user.lastLogin).toLocaleString() : 'Never'}
        </span>
      ),
    },
    {
      type: 'actions',
      render: (_, user) => (
        <>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => handleEditUser(user)}
            className="text-gray-400 hover:text-gray-500"
          >
            <PencilIcon className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => handleDeleteUser(user)}
            className="text-gray-400 hover:text-red-500"
          >
            <TrashIcon className="h-4 w-4" />
          </Button>
        </>
      ),
    },
  ];

  // Handle opening the create user modal
  const handleCreateUser = () => {
    setModalMode('create');
    setSelectedUser(null);
    setIsModalOpen(true);
  };

  // Handle opening the edit user modal
  const handleEditUser = (user) => {
    setModalMode('edit');
    setSelectedUser(user);
    setIsModalOpen(true);
  };

  // Handle user deletion
  const handleDeleteUser = (user) => {
    if (window.confirm(`Are you sure you want to delete ${user.firstName} ${user.lastName}?`)) {
      if (onUserDelete) {
        onUserDelete(user.id);
      }
    }
  };

  // Handle form submission
  const handleSubmit = async (data) => {
    try {
      if (modalMode === 'create') {
        if (onUserCreate) {
          await onUserCreate({
            ...data,
            id: Math.random().toString(36).substr(2, 9), // In a real app, this would be generated by the server
            isActive: data.isActive !== false,
            createdAt: new Date().toISOString(),
          });
        }
      } else {
        if (onUserUpdate) {
          await onUserUpdate({
            ...selectedUser,
            ...data,
            updatedAt: new Date().toISOString(),
          });
        }
      }
      setIsModalOpen(false);
    } catch (error) {
      console.error('Error saving user:', error);
    }
  };

  // Render user form modal
  const renderUserFormModal = () => {
    if (!isModalOpen) return null;

    const defaultValues = modalMode === 'edit'
      ? {
          firstName: selectedUser?.firstName || '',
          lastName: selectedUser?.lastName || '',
          email: selectedUser?.email || '',
          phone: selectedUser?.phone || '',
          roleId: selectedUser?.roleId || '',
          isActive: selectedUser?.isActive !== false,
          password: '',
        }
      : {
          firstName: '',
          lastName: '',
          email: '',
          phone: '',
          roleId: '',
          isActive: true,
          password: '',
        };

    return (
      <div className="fixed inset-0 z-50 overflow-y-auto">
        <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
          <div className="fixed inset-0 transition-opacity">
            <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
          </div>
          
          <span className="hidden sm:inline-block sm:align-middle sm:h-screen"></span>&#8203;
          
          <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
              <div className="sm:flex sm:items-start">
                <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                  <h3 className="text-lg leading-6 font-medium text-gray-900">
                    {modalMode === 'create' ? 'Create New User' : 'Edit User'}
                  </h3>
                  <div className="mt-4">
                    <Form
                      defaultValues={defaultValues}
                      schema={userSchema}
                      onSubmit={handleSubmit}
                      loading={loading}
                      className="space-y-4"
                      submitButtonText={modalMode === 'create' ? 'Create User' : 'Update User'}
                    >
                      {({ control }) => (
                        <>
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <FormField
                              name="firstName"
                              label="First Name"
                              type="text"
                              required
                              control={control}
                            />
                            
                            <FormField
                              name="lastName"
                              label="Last Name"
                              type="text"
                              required
                              control={control}
                            />
                          </div>
                          
                          <FormField
                            name="email"
                            label="Email"
                            type="email"
                            required
                            control={control}
                          />
                          
                          <FormField
                            name="phone"
                            label="Phone"
                            type="tel"
                            control={control}
                          />
                          
                          <FormField
                            name="roleId"
                            label="Role"
                            type="select"
                            required
                            control={control}
                            options={roles.map(role => ({
                              value: role.id,
                              label: role.name,
                            }))}
                          />
                          
                          {modalMode === 'create' && (
                            <FormField
                              name="password"
                              label="Password"
                              type="password"
                              required
                              control={control}
                              helperText="Minimum 8 characters"
                            />
                          )}
                          
                          <FormField
                            name="isActive"
                            type="checkbox"
                            checkboxLabel="Active"
                            control={control}
                            helperText="Inactive users cannot log in"
                          />
                        </>
                      )}
                    </Form>
                  </div>
                </div>
              </div>
            </div>
            <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
              <Button
                type="submit"
                form="form"
                variant="primary"
                className="w-full sm:w-auto sm:ml-3"
                loading={loading}
              >
                {modalMode === 'create' ? 'Create User' : 'Update User'}
              </Button>
              <Button
                type="button"
                variant="outline"
                onClick={() => setIsModalOpen(false)}
                className="mt-3 w-full sm:mt-0 sm:w-auto"
              >
                Cancel
              </Button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-6 py-4">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h2 className="text-lg font-medium text-gray-900">User Management</h2>
          <p className="mt-1 text-sm text-gray-500">
            Manage users and their roles in the system.
          </p>
        </div>
        <Button
          variant="primary"
          onClick={handleCreateUser}
          className="flex items-center"
        >
          <PlusIcon className="h-4 w-4 mr-1" />
          Add User
        </Button>
      </div>

      <Table
        data={users}
        columns={columns}
        loading={loading}
        emptyMessage="No users found"
        pagination={true}
        itemsPerPage={10}
      />

      {renderUserFormModal()}
    </div>
  );
};

UserManagement.propTypes = {
  /**
   * Array of user objects
   */
  users: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string.isRequired,
      firstName: PropTypes.string.isRequired,
      lastName: PropTypes.string.isRequired,
      email: PropTypes.string.isRequired,
      phone: PropTypes.string,
      roleId: PropTypes.string.isRequired,
      isActive: PropTypes.bool,
      lastLogin: PropTypes.string,
      profileImage: PropTypes.string,
    })
  ),
  /**
   * Array of role objects
   */
  roles: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string.isRequired,
      name: PropTypes.string.isRequired,
      description: PropTypes.string,
      permissions: PropTypes.array,
    })
  ),
  /**
   * Callback when a user is updated
   */
  onUserUpdate: PropTypes.func,
  /**
   * Callback when a user is created
   */
  onUserCreate: PropTypes.func,
  /**
   * Callback when a user is deleted
   */
  onUserDelete: PropTypes.func,
  /**
   * Whether the component is in a loading state
   */
  loading: PropTypes.bool,
};

export default UserManagement;
